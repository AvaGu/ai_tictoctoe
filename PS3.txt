1. Implement a tic-tac-toe program that uses Minimax and Alpha-Beta Pruning. See the implementation guidelines below. Include the following:
a. Your code, including a readme that says which compiler you used and how to run your game.
b. An output trace of your program in action, with the computer playing as the O player (moving second) in one game and the X player (moving first) in the other (each team member must do his or her own runs).

X : (1, 1)
O : (0, 0)
X : (0, 2)
O : (2, 0)
X : (0, 1)
O : (1, 0)

c. Describe who within your group performed which piece of the design/programming effort.
FanGu is responsible for creating the basic minmax algorithm, keeping trace of actions and coming up with evaluation audit.
Zhao is responsible for adding Alpha-Beta Pruning improvement to the origin minmax algorithm.


2. Answer the following questions regarding your program. These answers should be succinct (two or three sentences each), but specific enough that we could almost re-implement your solution based on the answers.
a. Which part of your code generates the next ply, and how does it work?
mini_max_decision returns a (row, col) which indicates the best next move for cpu.
This method first calls max_value with the current board state. Then max_value and min_value is called in turns recursively until the board is full or one player has won. Max_value and min_value returns the value and the action (row, col) to achieve that value.

b. What is your evaluation function, and why is it good?
The evalution function is the calculating the total calls to max_value and min_value during the game.
Every call to either max_value or min_value corresponds to a visit to a node in the game tree. So the counts of visit to node is a good evaluation of the algorithm where the fewer the count is the better the algorithm runs.

In a game as belows,
X : (1, 1)
O : (0, 0)
X : (0, 2)
O : (2, 0)
X : (0, 1)
O : (1, 0)
Algorithm without Alpha-Beta pruning makes 56472 visits to nodes.
With Alpha-Beta pruning, it only makes 18815 visits to node.

3. How will you have to alter your code in order to play Othello? In about one paragraph, describe the changes you'll need to make and where these will occur in the code. Assume we will provide starter code that implements the basic rules of Othello, as we did for Tic Tac Toe.

The following changes to made to implement Othelo is under the assumption that the basic starter code includes: Finding out all possible move for a player in a state, determining if a game is ended (either the board is full or it ends up ealier), counting the number of disks in a board state.


Since Othello has a different rule with tic tac toe, when making choices in the game tree, instead of iterating every cell in the board, in the Othello case, we need to only iterate over valid cell.

Also the result should not be only -1, 0, 1. Instead it should be the number of disks of the player who cares about. Because the more of disks you have in the end, the better the strategy is.

